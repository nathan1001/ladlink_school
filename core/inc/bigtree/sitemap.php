<?php
	/**
	 * Generates sitemap.xml file.
	 */
	class BigTreeSitemapGenerator {
	
		const FILE_PATH = 'cache/sitemap.xml';
		const GENERATED_BY = 'Generated by the BigTree CMS https://www.bigtreecms.org.';
		const XML_VERSION = '1.0';
		const ENCODING = 'UTF-8';
		const XMLNS = 'http://www.sitemaps.org/schemas/sitemap/0.9';
	
		/**
		 * The XML writer.
		 *
		 * @var \XMLWriter
		 */
		protected $writer;
	
		/**
		 * BigTreeSitemapGenerator constructor.
		 */
		public function __construct() {
			$this->writer = new XMLWriter();
		}
	
		/**
		 * Generates sitemap XML.
		 *
		 * @return string
		 *   The sitemap XML string.
		 */
		public function generateSitemap() {
			$links = $this->loadSitemapLinks();
			$xml = $this->getXml($links);
	
			return $xml;
		}
	
		/**
		 * Builds XML by links.
		 *
		 * @param array $links
		 *   The array of sitemap links.
		 *
		 * @return string
		 *   XML data.
		 */
		protected function getXml(array $links) {
			$this->writer->openMemory();
			$this->writer->setIndent(TRUE);
			$this->writer->startDocument(static::XML_VERSION, static::ENCODING);
			$this->writer->writeComment(static::GENERATED_BY);
			$this->writer->startElement('urlset');
			$this->writer->writeAttribute('xmlns', static::XMLNS);
	
			foreach ($links as $link) {
				$this->writer->startElement('url');
				$this->writer->writeElement('loc', $link);
				$this->writer->endElement();
			}
	
			$this->writer->endElement();
			$this->writer->endDocument();
	
			return $this->writer->outputMemory();
		}
	
		/**
		 * Saves XML data to the file.
		 *
		 * @param $xml
		 *   The sitemap XML data.
		 */
		public function saveFile($xml) {
			file_put_contents(SERVER_ROOT.static::FILE_PATH, $xml);
		}
	
		/**
		 * Loads sitemap.xml links.
		 *
		 * @return array
		 *   The links array.
		 */
		protected function loadSitemapLinks() {
			$links = array();
	
			$q = sqlquery("SELECT id,template,external,path FROM bigtree_pages WHERE archived = '' AND (publish_at >= NOW() OR publish_at IS NULL) ORDER BY id ASC");
	
			while ($f = sqlfetch($q)) {
				if ($f["template"] || strpos($f["external"],DOMAIN)) {
					if (!$f["template"]) {
						$link = BigTreeCMS::getInternalPageLink($f["external"]);
					} else {
						$link = BigTreeCMS::linkForPath($f["path"]);
					}
	
					$links[] = $link;
	
					// Added routed template support
					$template = BigTreeJSONDB::get("templates", $f["template"]);
	
					if ($template["module"]) {
						$module = BigTreeJSONDB::get("modules", $template["module"]);
	
						if ($module && $module["class"]) {
							$mod = new $module["class"];
	
							if (method_exists($mod,"getSitemap")) {
								$subnav = $mod->getSitemap($f);
	
								foreach ($subnav as $s) {
									$links[] = $s["link"];
								}
							}
	
							$mod = $subnav = null;
						}
					}
				}
			}
	
			return $links;
		}

	}
